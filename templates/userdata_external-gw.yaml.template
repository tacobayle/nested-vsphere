#cloud-config
users:
  - default

ssh_pwauth: True

chpasswd:
  list: |
    ubuntu:${password}
  expire: False

hostname: ${hostname}

write_files:
  - content: |
      #!/bin/bash
      # retrieve the network interface names
      ifaceFirstName=`ip -o link show | awk -F': ' '{print $2}' | head -2 | tail -1`
      macFirst=`ip -o link show | awk -F'link/ether ' '{print $2}' | awk -F' ' '{print $1}' | head -2 | tail -1`
      ifaceLastName=`ip -o link show | awk -F': ' '{print $2}' | head -3 | tail -1`
      macLast=`ip -o link show | awk -F'link/ether ' '{print $2}' | awk -F' ' '{print $1}' | head -3 | tail -1`
      hostname=${hostname}
      echo "${ip_gw} $hostname" | tee -a /etc/hosts
      cp /etc/netplan/50-cloud-init.yaml /etc/netplan/50-cloud-init.yaml.old
      echo "network:" | tee /etc/netplan/50-cloud-init.yaml
      echo "    ethernets:" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "        $ifaceFirstName:" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "            dhcp4: false" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "            addresses: [${ip_gw}/${prefix}]" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "            match:" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "                macaddress: $macFirst" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "            set-name: $ifaceFirstName" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "            gateway4: ${default_gw}" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "            nameservers:" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "              addresses: [${forwarders_netplan}]" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "        $ifaceLastName:" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "            match:" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "                macaddress: $macLast" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "            set-name: $ifaceLastName" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "            mtu: 9000" | tee -a /etc/netplan/50-cloud-init.yaml
      echo "    version: 2" | tee -a /etc/netplan/50-cloud-init.yaml
      netplan apply
      #
      # apt install
      #
      sleep 60
      wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
      apt update
      apt install -y jq
      packages='${packages}'
      echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
      echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
      echo $packages | jq -c -r .[] | while read package
      do
        apt install -y $package
      done
      #
      # Directories
      #
      directories='${directories}'
      echo $directories | jq -c -r .[] | while read directory
      do
        sudo -u ubuntu  mkdir -p /home/ubuntu/$directory
      done
      #
      # pip3
      #
      pip3 install --upgrade pip
      pip3_packages='${pip3_packages}'
      echo $pip3_packages | jq -c -r .[] | while read pip3_package
      do
        sudo -u ubuntu pip3 install $pip3_package
      done
      #
      # GOVC install
      #
      curl -L -o - "https://github.com/vmware/govmomi/releases/latest/download/govc_$(uname -s)_$(uname -m).tar.gz" | tar -C /usr/local/bin -xvzf - govc
      #
      # Network
      #
      mv /etc/netplan/50-cloud-init.yaml /etc/netplan/50-cloud-init.yaml.old
      cat /etc/netplan/50-cloud-init.yaml.old | head -n -1 | tee /etc/netplan/50-cloud-init.yaml
      echo "    vlans:" | tee -a /etc/netplan/50-cloud-init.yaml
      networks='${networks}'
      echo $networks | jq -c -r .[] | while read net
      do
        echo "        vlan.`echo $net | jq -c -r .vlan_id`:" | tee -a /etc/netplan/50-cloud-init.yaml
        echo "            id: `echo $net | jq -c -r .vlan_id`" | tee -a /etc/netplan/50-cloud-init.yaml
        echo "            link: $ifaceLastName" | tee -a /etc/netplan/50-cloud-init.yaml
        echo "            addresses: [`echo $net | jq -c -r .gw`/`echo $net | jq -c -r .cidr | cut -f2 -d'/'`]" | tee -a /etc/netplan/50-cloud-init.yaml
        if [[ $(echo ${net} | jq -c -r '.type') == "nsx-external" ]] ; then
          segments_overlay='${segments_overlay}'
          echo "            routes:" | tee -a /etc/netplan/50-cloud-init.yaml
          echo $segments_overlay | jq -c -r .[] | while read segment
          do
            echo "            - to: $(echo $segment | jq -c -r .cidr)" | tee -a /etc/netplan/50-cloud-init.yaml
            echo "              via: ${cidr_nsx_external_three_octets}.${tier0_vip_starting_ip}" | tee -a /etc/netplan/50-cloud-init.yaml
            sudo iptables -t nat -A POSTROUTING -s `echo $segment | jq -c -r .cidr` -o $ifaceFirstName -j MASQUERADE
          done
        fi
        sudo iptables -t nat -A POSTROUTING -s `echo $net | jq -c -r .cidr` -o $ifaceFirstName -j MASQUERADE
        sudo iptables -A FORWARD -i vlan.`echo $net | jq -c -r .vlan_id` -o $ifaceFirstName -j ACCEPT
      done
      echo "    version: 2" | tee -a /etc/netplan/50-cloud-init.yaml
      netplan apply
      iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      iptables-save | tee /etc/iptables/rules.v4
      sysctl -w net.ipv4.ip_forward=1
      echo "net.ipv4.ip_forward=1" | tee -a /etc/sysctl.conf
      #
      # DNS config
      #
      cp /etc/bind/named.conf.options /etc/bind/named.conf.options.bkup
      cp /etc/bind/named.conf.options /etc/bind/named.conf.options.old
      sudo tee /etc/bind/named.conf.options > /dev/null <<EOT
      options {
        directory "/var/cache/bind";
        recursion yes;
        notify yes;
        allow-query { any; };
        allow-query-cache { any; };
        allow-recursion { any; };
        forwarders { ${forwarders_bind}; };
        dnssec-validation no;
        auth-nxdomain no; # conform to RFC1035
        listen-on { localhost; any; };
        listen-on-v6 { localhost; any; };
        allow-transfer { any; };
      };
      EOT
      #
      sudo cp /etc/bind/named.conf.local /etc/bind/named.conf.local.old
      sudo tee /etc/bind/named.conf.local > /dev/null <<EOT
      zone "${domain}" {
        type master;
        forwarders {};
        allow-transfer { any; };
        update-policy {
          grant myKeyName zonesub any;
        };
        file "/var/lib/bind/db.${domain}";
      };
      zone "${reverse_mgmt}.in-addr.arpa" {
        type master;
        update-policy {
          grant myKeyName zonesub any;
        };
        allow-transfer { any; };
        file "/var/lib/bind/db.${reverse_mgmt}";
      };
      EOT
      #
      sudo tee /var/lib/bind/db.${domain} > /dev/null <<EOT
      \$ORIGIN .
      \$TTL 60
      ${domain}                IN SOA dns.${domain}. admin.${domain}. (
                                      329        ; serial
                                      604800     ; refresh (1 week)
                                      86400      ; retry (1 day)
                                      2419200    ; expire (4 weeks)
                                      604800     ; minimum (1 week)
                                      )
                              NS      dns.${domain}.
      \$ORIGIN ${domain}.
      dns       IN            A       ${ip_gw}
      ${vcsa_name}       IN            A       ${cidr_mgmt_three_octets}.${ip_vcsa}
      EOT
      #
      if [[ ${ip_nsx} != ${ip_gw} ]]; then
        echo "${nsx_manager_name}       IN            A       ${ip_nsx}" | tee -a /var/lib/bind/db.${domain}
      fi
      if [[ ${ip_avi} != ${ip_gw} ]]; then
        echo "${avi_ctrl_name}       IN            A       ${ip_avi}" | tee -a /var/lib/bind/db.${domain}
      fi
      count_esxi=1
      echo '${ips_esxi}' | jq -c -r .[] | while read ip_esxi
      do
        echo "${esxi_basename}$count_esxi      IN            A       ${cidr_mgmt_three_octets}.${ip_esxi}" | tee -a /var/lib/bind/db.${domain}
        ((count_esxi++))
      done
      #
      if [[ ${ip_avi_dns} != ${ip_gw} ]]; then
        echo "app-dns   IN            A       ${ip_avi_dns}" | tee -a /var/lib/bind/db.${domain}
        echo "\$ORIGIN ${avi_subdomain}.${domain}." | tee -a /var/lib/bind/db.${domain}
        echo "\$TTL 1D" | tee -a /var/lib/bind/db.${domain}
        echo "@         IN            NS      app-dns.${domain}." | tee -a /var/lib/bind/db.${domain}
      fi
      #
      sudo tee /var/lib/bind/db.${reverse_mgmt} > /dev/null <<EOT
      \$ORIGIN .
      \$TTL 60
      ${reverse_mgmt}.in-addr.arpa     IN SOA  dns.${domain}. admin.${domain}. (
                                      298        ; serial
                                      604800     ; refresh (1 week)
                                      86400      ; retry (1 day)
                                      2419200    ; expire (4 weeks)
                                      604800     ; minimum (1 week)
                                      )
                              NS      dns.${domain}.
      \$ORIGIN ${reverse_mgmt}.in-addr.arpa.
      ${ip_vcsa}            PTR     ${vcsa_name}
      EOT
      #
      if [[ ${ip_nsx} != ${ip_gw} ]]; then
        echo "${ip_nsx_last_octet}            PTR     ${nsx_manager_name}.${domain}." | tee -a /var/lib/bind/db.${reverse_mgmt}
      fi
      if [[ ${ip_avi} != ${ip_gw} ]]; then
        echo "${ip_avi_last_octet}            PTR     ${avi_ctrl_name}.${domain}." | tee -a /var/lib/bind/db.${reverse_mgmt}
      fi
      count_esxi=1
      echo '${ips_esxi}' | jq -c -r .[] | while read ip_esxi
      do
        echo "`echo $ip_esxi`            PTR     ${esxi_basename}$count_esxi.${domain}." | tee -a /var/lib/bind/db.${reverse_mgmt}
        ((count_esxi++))
      done
      #
      systemctl restart bind9.service
      #
      # NTP config
      #
      mv /etc/chrony/chrony.conf /etc/chrony/chrony.conf.old
      cat /etc/chrony/chrony.conf.old | grep -v pool | tee /etc/chrony/chrony.conf
      ntp_masters='${ntp_masters}'
      echo $ntp_masters | jq -c -r .[] | while read ntp_master
      do
        echo "pool $ntp_master iburst" | tee -a /etc/chrony/chrony.conf
      done
      echo "allow 0.0.0.0/0" | tee -a /etc/chrony/chrony.conf
      systemctl restart chrony.service
      #
      # K8s install
      #
      curl -fsSL https://pkgs.k8s.io/core:/stable:/${K8s_version_short}/deb/Release.key | sudo gpg --dearmor -o /tmp/kubernetes-apt-keyring.gpg
      echo "deb [signed-by=/tmp/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/${K8s_version_short}/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      apt update
      apt-get install -y kubectl
      echo "alias k=kubectl" | sudo tee -a /home/ubuntu/.profile
      echo "source <(kubectl completion bash | sed s/kubectl/k/g)" | sudo tee -a /home/ubuntu/.profile
      #
      # helm install
      #
      wget https://baltocdn.com/helm/signing.asc -O /tmp/signing.asc
      apt-key add /tmp/signing.asc
      sudo add-apt-repository "deb https://baltocdn.com/helm/stable/debian/ all main"
      apt-get install -y helm
      #
      # yaml download
      #
      cd /home/ubuntu/${yaml_folder}
      yaml_links='${yaml_links}'
      echo $yaml_links | jq -c -r .[] | while read yaml_link
      do
        sudo -u ubuntu wget $yaml_link
      done
      cd -
      #
      # Patching DNS to localhost
      #
      mv /etc/netplan/50-cloud-init.yaml /etc/netplan/50-cloud-init.yaml.patching_dns
      cat /etc/netplan/50-cloud-init.yaml.patching_dns | sed -e "s/${forwarders_netplan}/127.0.0.1/" | tee /etc/netplan/50-cloud-init.yaml
      netplan apply
      #
      # ssh keys init
      #
      sudo -u ubuntu ssh-keygen -t rsa -N "" -f /home/ubuntu/.ssh/id_rsa
      #
      # vault config
      #
      mv /etc/vault.d/vault.hcl /etc/vault.d/vault.hcl.ori
      export VAULT_ADDR="https://127.0.0.1:8200"
      vault_config='
      storage "file" {
        path    = "/opt/vault/data"
      }
        listener "tcp" {
          address     = "0.0.0.0:8200"
          tls_disable = "false"
          tls_cert_file = "/opt/vault/tls/tls.crt"
          tls_key_file = "/opt/vault/tls/tls.key"
        }
        ui = true
        api_addr = "https://${ip_gw}:8200"'
      echo "${vault_config}" | tee /etc/vault.d/vault.hcl
      systemctl start vault
      systemctl enable vault
      vault operator init -key-shares=1 -key-threshold=1 -tls-skip-verify -format json | tee ${vault_secret_file_path}
      vault operator unseal -tls-skip-verify $(jq -c -r .unseal_keys_hex[0] ${vault_secret_file_path})
      vault login -tls-skip-verify $(jq -c -r .root_token ${vault_secret_file_path})
      # root ca
      vault secrets enable -tls-skip-verify ${vault_pki_name}
      vault secrets tune -tls-skip-verify -max-lease-ttl=${vault_pki_max_lease_ttl} "${vault_pki_name}"
      vault write -tls-skip-verify -field=certificate ${vault_pki_name}/root/generate/internal common_name="${vault_pki_cert_common_name}" issuer_name="${vault_pki_cert_issuer_name}" ttl=${vault_pki_cert_ttl} > ${vault_pki_cert_path}
      vault write -tls-skip-verify ${vault_pki_name}/roles/${vault_pki_role_name} allow_any_name=true
      vault write -tls-skip-verify ${vault_pki_name}/config/urls issuing_certificates="https://${ip_gw}:8200/v1/${vault_pki_role_name}/ca" crl_distribution_points="https://${ip_gw}:8200/v1/${vault_pki_role_name}/crl"
      # intermediate ca
      vault secrets enable -tls-skip-verify -path=${vault_pki_intermediate_name} ${vault_pki_name}
      vault secrets tune -tls-skip-verify -max-lease-ttl=${vault_pki_intermediate_max_lease_ttl} ${vault_pki_intermediate_name}
      vault write -tls-skip-verify -format=json ${vault_pki_intermediate_name}/intermediate/generate/internal common_name="${vault_pki_intermediate_cert_common_name}" issuer_name="${vault_pki_intermediate_cert_issuer_name}" | jq -r '.data.csr' | tee ${vault_pki_intermediate_cert_path}
      vault write -tls-skip-verify -format=json ${vault_pki_name}/root/sign-intermediate issuer_ref="${vault_pki_cert_issuer_name}" csr=@${vault_pki_intermediate_cert_path} format=pem_bundle ttl="${vault_pki_intermediate_max_lease_ttl}" | jq -r '.data.certificate' | tee ${vault_pki_intermediate_cert_path_signed}
      vault write -tls-skip-verify ${vault_pki_intermediate_name}/intermediate/set-signed certificate=@${vault_pki_intermediate_cert_path_signed}
      vault write -tls-skip-verify ${vault_pki_intermediate_name}/roles/${vault_pki_intermediate_role_name} issuer_ref="$(vault read -tls-skip-verify -field=default ${vault_pki_intermediate_role_name}/config/issuers)" allowed_domains="${domain}" allow_subdomains=${vault_pki_intermediate_role_allow_subdomains} max_ttl="${vault_pki_intermediate_role_max_ttl}"
      #
      # pointer to jsonFile
      #
      echo "{\"jsonFile\": \"/home/ubuntu/json/${jsonFile}\"}" | tee /home/ubuntu/lbaas/lbaas.json
      #
      # End of cloud init
      #
      echo "cloud init done" | tee /tmp/cloudInitDone.log
    path: /opt/bootstrap.sh
    permissions: 0755

  - content: |
      ubuntu ALL=(ALL) NOPASSWD:ALL
    path: /etc/sudoers.d/ubuntu

runcmd:
  - /opt/bootstrap.sh